import com.rameses.annotations.*
import com.rameses.common.*

class ItemAcctMasterService {
	@PersistenceContext('main')
	def em
	
	@Service('ETRACSUtilService')
	def utilSvc
	
	@PersistenceContext('system')
	def sysem 
	
	def STATE_DRAFT = 'DRAFT'
	def STATE_APPROVED = 'APPROVED'
	def SCHEMA_NAME = 'itemacct'
	
	@ProxyMethod
	public def init() { }
	
	@ProxyMethod
	public def create( entity ) {
		/*if( entity.fundname ) 
			entity.fundid = getFundId( entity.fundname );*/
		validate( entity ) ;
		/*resetNgasAccount( entity );
		resetSreAccount( entity );*/
	
		em.create( SCHEMA_NAME, entity);
		return entity
	}
	
	/*private def getFundId( fundname ){
		return em.sqlContext.createNamedQuery("incomeacct:getFundId").setParameter("fundname", fundname).singleResult.objid;	
	}*/
	
	private void validate( entity ) {
		em.validate(SCHEMA_NAME, entity);
		utilSvc.checkDuplicateFieldValue('Account No.', 'itemaccount', 'acctno', entity)
		utilSvc.checkDuplicateFieldValue('Account Title', 'itemaccount', 'accttitle', entity)
		if( !entity.valuetype ) entity.defaultvalue = 0.0;
		if( entity.valuetype && entity.defaultvalue < 0.0)  throw new Exception("Default Value must be greater than zero." );
	}
	
	/*private void resetNgasAccount( entity ) {
		if( !entity.ngasid )
			entity.ngastitle = null
			
		if( ! entity.ngastitle ) {
			entity.ngasacctid = null;
		}
	}
	
	private void resetSreAccount( entity ) {
		if( !entity.sreid )
			entity.sretitle = null
			
		if( ! entity.sretitle ) {
			entity.sreacctid = null;
		}
	}*/
	
	@ProxyMethod
	public def open( entity ) {
		entity = em.read(SCHEMA_NAME, entity)
		
		if( !entity ) throw new Exception('Item Account does not exists or has already been deleted.')
		return entity
	}
	
	@ProxyMethod
	public def update( entity ) {
		def old = open(entity)
		
		if( old.state == STATE_APPROVED)
		throw new Exception('Item Account has already been approved.')
		
		if( entity.fundname ) entity.fundid = getFundId( entity.fundname );
		validate( entity )
		em.update(SCHEMA_NAME, entity)
		return entity
	}
	
	@ProxyMethod
	public def approve( entity ) {
		def old = open(entity)
		
		if( old.state == STATE_APPROVED )
		throw new Exception('Item Account has already been approved.')

		entity.state = STATE_APPROVED
		return update( entity )
	}
	
	@ProxyMethod
	public void delete( entity ) {
		checkReferencedId( entity );
		em.delete(SCHEMA_NAME, entity)
	}
	
	private void checkReferencedId( entity ){
		def data = em.sqlContext.createNamedQuery('itemacct:checkReferencedId').setParameter("acctid", entity.objid).singleResult
		utilSvc.checkDuplicateError( data.count, "Delete not allowed. Income Account has already been referenced." )
		def acct = sysem.sqlContext.createNamedQuery( 'itemacct:getAccttitleAtRule' ).setParameter( 'acctid', '%' + entity.objid + '%' ).singleResult
		if( acct ) throw new Exception('Delete not allowed. Income Account has already been referenced at Business Rule.')
	}
	
	@ProxyMethod
	public def getFundById( params ) {
		if( !params.fundid ) throw new Exception('Fund id is required.')
		
		return em.read('fund', [objid: params.fundid])
	}
	
	@ProxyMethod
	public def getIncomeAcctGroupById( params ) {
		if( !params.incomeaccountgroupid ) throw new Exception('Group id is required.')
		
		return em.read('incomeacctgroup', [objid: params.incomeaccountgroupid])
	}
}