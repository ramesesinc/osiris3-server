import com.rameses.annotations.*
import com.rameses.common.*

class BankMasterService {
	@PersistenceContext('main')
	def em
	
	@Service('ETRACSUtilService')
	def utilSvc
	
	def SCHEMA_NAME = 'bank'
	def STATE_DRAFT = 'DRAFT'
	def STATE_APPROVED = 'APPROVED'
	
	@ProxyMethod
	public def init() {}
	
	@ProxyMethod
	public def create( entity ) {
		validate( entity );
		checkDuplicates( entity );
		em.create( SCHEMA_NAME, entity );
		
		return entity
	}
	
	private void validate( entity ){
		em.validate(SCHEMA_NAME, entity);
	}
	
	private void checkDuplicates( entity ){
		utilSvc.checkDuplicateFieldValue('Code', 'bank', 'code', entity)
		utilSvc.checkDuplicateFieldValue('Name', 'bank', 'name', entity)
	}
	
	@ProxyMethod
	public def open( entity ) {
		entity = em.read(SCHEMA_NAME, entity)
		
		if( !entity ) throw new Exception('Bank does not exists or has already been deleted.')
		return entity
	}
	
	@ProxyMethod
	public def update( entity ) {
		def old = open(entity)
		
		if( old.state == STATE_APPROVED)
		throw new Exception('Bank has already been approved.')
		
		validate( entity )
		def ref = isReferenced( entity );
		if( ref ) throw new Exception( 'Update not allowed. Bank is already referenced by a transaction.' )	;
		
		em.update( SCHEMA_NAME, entity )
		return entity
	}
	
	private boolean isReferenced( entity )  {
		def data = em.sqlContext.createNamedQuery( 'bank:checkIfReferenced' ).setParameters( ['bankid':entity.objid] ).singleResult;
		if( data.count != 0 ) return true;
      
		return false;
	}
	
	@ProxyMethod
	public def approve( entity ) {
		def old = open(entity)
		
		if( old.state == STATE_APPROVED )
		throw new Exception('Bank has already been approved.')

		entity.state = STATE_APPROVED
		return update( entity )
	}
	
	@ProxyMethod
	public void delete( entity ) {
		try{
		   def ref = isReferenced( entity );
		   if( !ref ) {
	   			em.delete( SCHEMA_NAME, entity );
	   		}
	   		else{
	   		   throw new Exception( 'Delete not allowed. Bank is already referenced by a transaction.' )
	   		}
		}catch( Throwable e ){
			throw e
		}
	}
}