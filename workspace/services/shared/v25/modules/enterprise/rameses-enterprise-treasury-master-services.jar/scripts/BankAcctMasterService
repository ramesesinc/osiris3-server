import com.rameses.annotations.*
import com.rameses.common.*

class BankAcctMasterService {
	@PersistenceContext('main')
	def em
	
	def STATE_DRAFT = 'DRAFT'
	def STATE_APPROVED = 'APPROVED'
	def SCHEMA_NAME = 'bankacct'
	
	@ProxyMethod
	public def create( entity ) {
		em.validate(SCHEMA_NAME, entity)
		checkDuplicates( entity );
		em.create(SCHEMA_NAME, entity)
		
		return entity
	}
	
	private void checkDuplicates( entity ){
		def data = em.sqlContext.createNamedQuery( 'bankacct:checkDuplicateBankAccount' )
						.setParameters( [acctno:entity.acctno, fundid:entity.fundid] )
						.singleResult;
		if( data.count != 0 ) throw new Exception( "Bank Account already exists." )
	}
	
	@ProxyMethod
	public def open( entity ) {
		entity = em.read(SCHEMA_NAME, entity)
		
		if( !entity ) throw new Exception('Bank Account does not exists or has already been deleted.')
		return entity
	}
	
	@ProxyMethod
	public def update( entity ) {
		def old = open(entity)
		
		if( old.state == STATE_APPROVED)
		throw new Exception('Bank Account has already been approved.')
		
		em.validate(SCHEMA_NAME, entity)
		em.update(SCHEMA_NAME, entity)
		return entity
	}
	
	@ProxyMethod
	public def approve( entity ) {
		def old = open(entity)
		
		if( old.state == STATE_APPROVED)
		throw new Exception('Bank Account has already been approved.')
		
		entity.state = STATE_APPROVED
		return update( entity )
	}
	
	@ProxyMethod
	public void delete( entity ) {
		em.delete( SCHEMA_NAME, entity );
	}
	
	@ProxyMethod
	public def getBankById( params ) {
		if( !params.bankid ) throw new Exception('Bank id is required.')
		
		def bank = em.read('bank', [objid: params.bankid])
		if( !bank ) throw new Exception('Bank does not exist or has already been deleted.')
		
		return bank
	}
}