import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*

class RevenueAccountMappingService  {

	@ActiveDB("revenueitem")
	def em;

	@Env
	def env;
	
	@Service("AccountSegmentService")
	def segmentSvc;

	@ProxyMethod
	public def getColumns( def o ) {
		def list = [
			[name:'code', caption:'Item Code', width:100, resizable:false ],
			[name:'title', caption:'Item Title', width:200 ],
		];
		em.getAccountColumns().each {
			list << [name: it.name, caption:it.title, width:150, editable:true,
					type:'lookup', handler:'lookupSegment', expression:'#{item.' + it.name + '.code}- #{item.' + it.name + '.title}']
		}
		return list;
	}
	
	@ProxyMethod
	public def getList( m ) {
		def colBuilder = new StringBuilder();
		def sourceBuilder = new StringBuilder();
		def cols = em.getAccountColumns().each {
			colBuilder.append("," + it.name + ".code AS " + it.name + "_code, " + it.name + ".title AS " + it.name + "_title");
			sourceBuilder.append( ' LEFT JOIN revenueitem_' + it.name + ' ON r.objid=revenueitem_' + it.name + ".objid " );
			sourceBuilder.append( ' LEFT JOIN ' + it.source + ' ' + it.name + ' ON revenueitem_' + it.name + '.acctid=' + it.source + ".objid " );
		}
		m.columns = colBuilder.toString();
		m.sources = sourceBuilder.toString();
		return em.getAccountList(m);
	}
	
	@ProxyMethod
	public def addSegment(o) {
		o.objectname = "revenueitem";
		segmentSvc.addSegment(o);
	}

}
