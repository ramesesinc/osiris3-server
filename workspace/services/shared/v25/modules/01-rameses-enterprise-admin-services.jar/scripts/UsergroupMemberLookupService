import com.rameses.annotations.*
import com.rameses.common.*
import java.rmi.server.UID;
import com.rameses.util.*;
import com.rameses.io.*;

class UsergroupMemberLookupService  {

	@PersistenceContext('admin')
	def em;

	@ProxyMethod
	public def getColumns( param ) {
		return  [
			[name:'lastname', caption:'Last Name'],
			[name:'firstname', caption:'First Name'],
			[name:'middlename', caption:'Middle Name'],
			[name:'jobtitle', caption:'Job Title'] 
		] 
	}

	def searchTypes = [
		[filter:' AND ugm.user_lastname LIKE $P{searchtext} '], 
		[filter:' AND ugm.user_firstname LIKE $P{searchtext} '], 
		[filter:' AND ugm.user_username LIKE $P{searchtext} '] 
	];

	@ProxyMethod
	public List getList( params ) {
		if(params._tag) params.usergroupid = params._tag;

		params.searchtext = removeLeadingChar(params.searchtext, '%')+'%'; 

		def qry = em.sqlContext.createNamedQuery('usergroupmember:lookup'); 
		qry.setFirstResult(params._start? params._start: 0);
		qry.setMaxResults(params._limit? params._limit: 10);
		qry.setPagingKeys("u.objid")
		for (o in searchTypes) {
			def list = qry.setParameters(params).setVars(o).resultList;
			if (list.isEmpty()) continue; 
			list.each {
				it.name = it.firstname + " " + it.lastname;
				it.title = it.jobtitle;
			}
			return list;
		} 
		//otherwise return an empty list
		return []; 
	}

	@ProxyMethod
	public def find( params ) {
		if (!params.usergroupid) throw new Exception('Please specify usergroupid'); 
		if (!params.userid) throw new Exception('Please specify userid'); 

		return em.sqlContext.createNamedQuery('usergroupmember:find').setParameters(params).singleResult; 
	}	

    private String removeLeadingChar(String text, def ch) {
    	if (text == null) return "";

        while (true) { 
            if (!text.startsWith(ch+"")) break; 
            
            text = text.substring(1); 
        } 
        return text; 
    } 	
}


