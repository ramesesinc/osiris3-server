import com.rameses.annotations.*
import com.rameses.common.*
import java.rmi.server.UID;
import com.rameses.util.*;
import com.rameses.io.*;
import com.rameses.services.extended.*;


class UserAdminService extends AbstractCrudListService {

	@PersistenceContext('admin')
	def	em; 

	String schemaName = 'user';
	
	@Env
	def env;
	
	@ProxyMethod
	public def getColumns( param ) {
		return  [
			[name:'username', caption:'User Name'],
			[name:'lastname', caption:'Last Name'],
			[name:'firstname', caption:'First Name'],
			[name:'middlename', caption:'Middle Name'],
			[name:'jobtitle', caption:'Job Title'],
			[name:'state', caption:'Status']
		]
	}

	public void beforeCreate( def o ) {
		o.name = o.lastname + ", "+ o.firstname;
		if (o.middlename) o.name = o.name + " " + o.middlename;
		
		o.pwd = Encoder.MD5.encode('etracs1234', o.username); 
	}

	public void afterOpen( entity ) {
		entity.usergroups = getUsergroups(entity); 
	}


	def searchTypes = [
		[filter:' u.lastname LIKE $P{searchtext} '], 
		[filter:' u.username LIKE $P{searchtext} '], 
		[filter:' u.firstname LIKE $P{searchtext} '] 
	];

	public def getList( params ) {
		params.searchtext = (params.searchtext? params.searchtext+'%': '%');

		def qry = em.sqlContext.createNamedQuery(schemaName+':getList'); 
		qry.setFirstResult(params._start? params._start: 0);
		qry.setMaxResults(params._limit? params._limit: 10);

		for (o in searchTypes) {
			def list = qry.setParameters(params).setVars(o).resultList;
			if (list.isEmpty()) continue;

			list.each {
				it.name = it.firstname + " " + it.lastname;
				it.title = it.jobtitle;
			}
			return list;
		} 
		//otherwise return an empty list
		return []; 		
	}


	@ProxyMethod 
	public List getUsergroups( params ) {
		def qry = em.sqlContext.createNamedQuery(schemaName+':getUsergroups');
		return qry.setParameters([userid: params.objid]).resultList;
	}
}


