import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*

class AFSerialInventoryInterceptor {

	

	@ActiveDB("afserial_inventory")
	def afInventorySvc;

	@ActiveDB("stockitem")
	def stockitem;

	@After(pattern="StockInventoryService.getAvailable", eval="#{args[0].itemclass == 'AF'}")
	public void getAvailability(def evt) {
		def result = evt.result;
		def list = result.items.findAll{ it.qtyissued > 0 && it.item.type == "AFSERIAL" };
		for(it in list ) {
			def afid = it.item.objid;
			def unit = it.unit;
			def qtyPerUnit = stockitem.findUnitQty( [itemid: afid, unit: unit] )?.qty;
			if(qtyPerUnit==null)
				throw new Exception("Qty per unit not found for "+it.item.objid);\

			def qty = it.qtyissued;
			def availableList = afInventorySvc.findAllAvailable( [afid: afid ] );
			if(!availableList)
				throw new Exception("Not enough stock for " + afid);

			def buffer = [];
			for( i in availableList ) {
				def m = [:];
				m.afid = afid;
				int counter = 0;
				m.controlid = i.controlid;
				//required info					
				m.unitqty = qtyPerUnit;
				m.itemtype = it.item.type.toUpperCase();
				m.itemclass = it.item.itemclass.toUpperCase();

				if( i.qtybalance > (qty * qtyPerUnit)  ) {
					m.qtyissued = (qty * qtyPerUnit);					
					counter = qty;
					qty = 0;
				}
				else {
					m.qtyissued = i.qtybalance;
					counter = (i.qtybalance / qtyPerUnit);
					qty -= counter;
				}
				if(i.prefix) m.prefix = i.prefix;
				if(i.suffix) m.suffix = i.suffix;
				if(i.startseries) m.startseries = i.startseries;
				if(i.endseries ) m.endseries = m.startseries + m.qtyissued - 1;
				m.startstub = i.startstub;
				m.endstub = m.startstub + counter - 1;
				buffer << m;
				if(qty==0)break;
			}
			it.items = buffer;
			if(qty > 0 ) break;
		}
	}

	

}