import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*

/** This posts transaction to the af accountability */
class RemittanceInterceptor {
	
	@Service("AFSerialInventoryService")
	def afSerialSvc;

	@ActiveDB("remittance_af")
	def remittanceAf;

	@After(pattern="RemittanceService.post")
	public void postAFControl( def evt ) { 
		def o = evt.result;
		o.items.each {
			def m = [:];		
			m.controlid = it.controlid;
			m.refid = o.objid;
			m.reftype = "remittance";	
			m.refno = o.txnno;
			m.refdate = o.dtposted;
			m.afid = it.formno;
			m.startseries = (it.startseries!=null)?it.startseries: 0;
			m.endseries = (it.endseries!=null)?it.endseries: 0;
			m.qty= (it.endseries - it.startseries) + 1;
			m.txntype = "REMITTANCE";
			m.remarks = "REMITTANCE" 
			m.startstub = 0;
			m.endstub = 0;
			afSerialSvc.postIssue(m);
		}

		//update the remittanceid for all 
		//for each controlid, find maximum ending balance and credit it as begin	
		remittanceAf.updateRemittanceAF( [collectorid:o.collector.objid, remittanceid: o.objid] );

		//group each af by control then insert max ending start and beginning
		def list = remittanceAf.getRemittanceForBalanceForward([remittanceid: o.objid]);
		list.each {
			def m = [controlid: it.controlid];
			m.startseries = it.startseries;
			m.endseries = it.endseries;
			m.txntype = "FORWARD";
			m.remarks = "FORWARD BALANCE FROM REMITTANCE";
			m.qty= (it.endseries - it.startseries) + 1;
			m.endstub = 0; 
			m.controlid = it.controlid;
			m.refid = o.objid;
			m.reftype = "remittance";	
			m.refno = o.txnno;
			m.refdate = o.dtposted;
			m.afid = it.formno;
			afSerialSvc.postBegin(m);
		}
	}
	
}