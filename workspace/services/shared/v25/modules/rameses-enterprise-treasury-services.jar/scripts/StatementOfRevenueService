import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*

class StatementOfRevenueService  
{

	@PersistenceContext("main")
	def em; 

	@Service('RPTUtil')
	def util

	@Service('DateService')
	def dtSvc 

	def PADDING_SIZE = 6


	@ProxyMethod
	public def generateReport( params ) {
		util.required('Chart Type', params.charttype)	//charttype values: ngas, sre
		util.required('Year', params.year)
		util.required('Qtr', params.qtr)				//values : 1,2,3,4

		def result = []
		params.idx = -1
		buildDateFilter(params)

		def revenue = getRevenueAccount(params.charttype)
		buildAccount(result, revenue, params)

		return [
			title 		: 'STATEMENT OF REVENUE',
			period 		: util.buildPeriod(params),
			reportdata  : result,
		]
	}

	void buildAccount(result, account, params){
		params.idx += 1
		def padding = ''.padLeft(params.idx * PADDING_SIZE,' ')
		account.title = padding + account.title
		account.amount = 0.0
		account.level = params.idx 
		result << account
		params.accountid = account.objid 
		account.amount = getAmountByAccountId(params)
		getAccountsByParent(account, params).each{
			buildAccount(result, it, params)
		}
		
		params.idx -= 1

		/*
		//insert summary
		if ( account.type == 'group'){ 
			def idx = params.idx-2
			padding = ''.padLeft(idx * PADDING_SIZE,' ')
			def subitems = result.findAll{it.parentid == account.objid}
			def subtotal = subitems.sum{ 
				def total = (it.amount != null ? it.amount : 0.0)
				total += (it.subtotal != null ? it.subtotal : 0.0)
			}
			def parentid = (account.parentid ? account.parentid : account.objid)
			result << [title:padding + account.title + ' TOTAL:',amount:0.0, subtotal:subtotal, parentid:parentid, type:'summary', level:idx ]
		}
		*/
	}

	/*params:  fromdate, todate, accountid */
	def getAmountByAccountId(params){
		def data = em.sqlContext.createNamedQuery('statementofrevenue:getAmountByAccountId')
							.setParameters(params).singleResult
		if (data.amount && data.amount > 0.0)
			return data.amount 
		return 0.0
	}

	def getAccountsByParent(parent, params){
		return em.sqlContext.createNamedQuery('statementofrevenue:getAccountsByParentId' + params.charttype.toUpperCase())
						.setParameter('parentid', parent.objid)
						.resultList
	}

	def getRevenueAccount(charttype){
		def revenue = em.sqlContext.createNamedQuery('statementofrevenue:getRevenueAccount' + charttype.toUpperCase())
						.singleResult
		if (!revenue) throw new Exception(charttype.toUpperCase() + ' Revenue Account is not defined.')
		return revenue 
	}

	void buildDateFilter(params){
		if (params.qtr != null && params.month != null) {
			params.fromdate = params.year + '-' + params.month.index + '-01'
			params.todate   = dtSvc.getMonthEndDate(dtSvc.parse('yyyy-MM-dd', params.fromdate))
		}
		else {
			params.fromdate = dtSvc.getBeginningQtrDate( params.qtr, params.year, 1 )
			params.todate   = dtSvc.getQtrEndDate( params.qtr, params.year )
		}
	}

}