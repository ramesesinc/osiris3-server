import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*

class LiquidationReportService  {

	@PersistenceContext("main")
	def em; 

	@Service("NumberService")
	def numSvc;

	@ProxyMethod 
	def getRCDReportData( params ) {
		def liquidation = em.sqlContext.createNamedQuery('liquidation:getRCDMainInfo').setParameters(params ).singleResult
		if(! liquidation ) throw new Exception("Could not open liquidation with ojbid " + params.liquidationid )

		liquidation.remittances = em.sqlContext.createNamedQuery('liquidation:getRCDRemittances').setParameters(params ).resultList
		liquidation.collectionsummaries = em.sqlContext.createNamedQuery('liquidation:getRCDCollectionSummary').setParameters(params ).resultList
		liquidation.remittedforms = em.sqlContext.createNamedQuery('liquidation:getRCDRemittedForms').setParameters(params ).resultList
		liquidation.otherpayments = em.sqlContext.createNamedQuery('liquidation:getRCDOtherPayments').setParameters(params ).resultList

		//not yet implemented : waiting for sir elmo's db structure 
		liquidation.nonserialremittances = []
		liquidation.nonserialsummary = []
		liquidation.amountinwords = numSvc.doubleToWords( liquidation.amount )
		return liquidation;
	}

	@ProxyMethod 
	def getFundlist( liquidationid ) {
		def list = em.sqlContext.createNamedQuery('liquidation:getLiquidationFundlist')
				.setParameter('liquidationid', liquidationid)
				.resultList 
		return list

	}

}