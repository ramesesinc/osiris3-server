import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*

class RemittanceReportService  {

	@PersistenceContext("main")
	def em; 

	@Service("NumberService")
	def numSvc;

	@ProxyMethod 
	def getRCDReportData( remittanceid ) {
		def remittance = em.read('remittance:remittance', [objid: remittanceid] )
		if(! remittance ) throw new Exception("Could not open remittance with ojbid " + remittanceid )

		remittance.collectiontype = em.sqlContext.createNamedQuery('remittance:getRCDCollectionType').setParameter('remittanceid', remittanceid ).resultList
		remittance.collectionsummaries = em.sqlContext.createNamedQuery('remittance:getRCDCollectionSummaries').setParameter('remittanceid', remittanceid ).resultList
		remittance.remittedforms = em.sqlContext.createNamedQuery('remittance:getRCDRemittedForms').setParameter('remittanceid', remittanceid ).resultList
		remittance.otherpayments = em.sqlContext.createNamedQuery('remittance:getRCDOtherPayment').setParameter('remittanceid', remittanceid ).resultList

		//not yet implemented : waiting for sir elmo's db structure 
		remittance.nonserialremittances = []
		remittance.nonserialsummary = []

		remittance.amountinwords = numSvc.doubleToWords( remittance.amount).toUpperCase()

		return remittance 	

	}

}